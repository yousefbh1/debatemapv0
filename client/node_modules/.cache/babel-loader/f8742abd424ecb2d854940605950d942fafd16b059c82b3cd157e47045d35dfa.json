{"ast":null,"code":"var _jsxFileName = \"/home/yousefbh/projects/debatemapv0/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { Background, Controls, useNodesState, useEdgesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\n\n// A custom node component that styles itself based on the debate node type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomNode = ({\n  data\n}) => {\n  // Base style for the node\n  let style = {\n    padding: '10px',\n    border: '1px solid #777',\n    minWidth: '100px',\n    textAlign: 'center'\n  };\n\n  // Adjust styling based on node type\n  switch (data.nodeType) {\n    case 'Key Claim':\n      style = {\n        ...style,\n        backgroundColor: '#e3f2fd'\n      }; // light blue\n      break;\n    case 'Supporting Argument':\n      style = {\n        ...style,\n        borderRadius: '50%',\n        backgroundColor: '#c8e6c9'\n      }; // green circle\n      break;\n    case 'Evidence':\n      style = {\n        ...style,\n        clipPath: 'polygon(50% 0%, 0% 100%, 100% 100%)',\n        backgroundColor: '#fff9c4' // yellow-ish triangle\n      };\n      break;\n    case 'Counterargument':\n      style = {\n        ...style,\n        backgroundColor: '#ffcdd2'\n      }; // light red/salmon\n      break;\n    default:\n      break;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: style,\n    children: data.label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 10\n  }, this);\n};\n_c = CustomNode;\nconst nodeTypes = {\n  custom: CustomNode\n};\nconst App = () => {\n  _s();\n  // React Flow state hooks for nodes and edges\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n\n  // Local state for our debate functionality\n  const [nodeText, setNodeText] = useState('');\n  const [nodeType, setNodeType] = useState('Key Claim');\n  const [isMyTurn, setIsMyTurn] = useState(true); // Simulate turn-based editing\n\n  // Function to add a new node\n  const addNode = () => {\n    if (!isMyTurn) {\n      alert(\"It's not your turn!\");\n      return;\n    }\n    const id = (nodes.length + 1).toString();\n    const newNode = {\n      id,\n      type: 'custom',\n      // use our custom node renderer\n      data: {\n        label: nodeText || `Node ${id}`,\n        nodeType\n      },\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      }\n    };\n    setNodes(nds => [...nds, newNode]);\n    setNodeText(''); // Clear input after adding\n  };\n\n  // Toggle turn simulation (in a real app, the backend would enforce this)\n  const endTurn = () => {\n    setIsMyTurn(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        zIndex: 10,\n        top: 10,\n        left: 10,\n        background: '#fff',\n        padding: '10px',\n        borderRadius: '5px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Turn:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), \" \", isMyTurn ? 'Your Turn' : \"Opponent's Turn\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter node text\",\n          value: nodeText,\n          onChange: e => setNodeText(e.target.value),\n          style: {\n            marginRight: '5px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: nodeType,\n          onChange: e => setNodeType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Key Claim\",\n            children: \"Key Claim\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Supporting Argument\",\n            children: \"Supporting Argument\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Evidence\",\n            children: \"Evidence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Counterargument\",\n            children: \"Counterargument\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNode,\n          disabled: !isMyTurn,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: endTurn,\n          style: {\n            marginLeft: '5px'\n          },\n          children: \"End Turn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"JB0+g8L1QNYDoWvy0PAomGZdpN0=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomNode\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","ReactFlow","Background","Controls","useNodesState","useEdgesState","jsxDEV","_jsxDEV","CustomNode","data","style","padding","border","minWidth","textAlign","nodeType","backgroundColor","borderRadius","clipPath","children","label","fileName","_jsxFileName","lineNumber","columnNumber","_c","nodeTypes","custom","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nodeText","setNodeText","setNodeType","isMyTurn","setIsMyTurn","addNode","alert","id","length","toString","newNode","type","position","x","Math","random","y","nds","endTurn","prev","height","width","zIndex","top","left","background","marginTop","placeholder","value","onChange","e","target","marginRight","onClick","disabled","marginLeft","fitView","color","gap","_c2","$RefreshReg$"],"sources":["/home/yousefbh/projects/debatemapv0/client/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  Background,\n  Controls,\n  useNodesState,\n  useEdgesState,\n  Node,\n  Edge,\n  addEdge,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\n// A custom node component that styles itself based on the debate node type\nconst CustomNode = ({ data }: { data: { label: string; nodeType: string } }) => {\n  // Base style for the node\n  let style: React.CSSProperties = {\n    padding: '10px',\n    border: '1px solid #777',\n    minWidth: '100px',\n    textAlign: 'center',\n  };\n\n  // Adjust styling based on node type\n  switch (data.nodeType) {\n    case 'Key Claim':\n      style = { ...style, backgroundColor: '#e3f2fd' }; // light blue\n      break;\n    case 'Supporting Argument':\n      style = { ...style, borderRadius: '50%', backgroundColor: '#c8e6c9' }; // green circle\n      break;\n    case 'Evidence':\n      style = {\n        ...style,\n        clipPath: 'polygon(50% 0%, 0% 100%, 100% 100%)',\n        backgroundColor: '#fff9c4', // yellow-ish triangle\n      };\n      break;\n    case 'Counterargument':\n      style = { ...style, backgroundColor: '#ffcdd2' }; // light red/salmon\n      break;\n    default:\n      break;\n  }\n  return <div style={style}>{data.label}</div>;\n};\n\nconst nodeTypes = { custom: CustomNode };\n\nconst App: React.FC = () => {\n  // React Flow state hooks for nodes and edges\n  const [nodes, setNodes, onNodesChange] = useNodesState<Node[]>([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge[]>([]);\n\n  // Local state for our debate functionality\n  const [nodeText, setNodeText] = useState('');\n  const [nodeType, setNodeType] = useState('Key Claim');\n  const [isMyTurn, setIsMyTurn] = useState(true); // Simulate turn-based editing\n\n  // Function to add a new node\n  const addNode = () => {\n    if (!isMyTurn) {\n      alert(\"It's not your turn!\");\n      return;\n    }\n    const id = (nodes.length + 1).toString();\n    const newNode: Node = {\n      id,\n      type: 'custom', // use our custom node renderer\n      data: { label: nodeText || `Node ${id}`, nodeType },\n      position: { x: Math.random() * 400, y: Math.random() * 400 },\n    };\n    setNodes((nds) => [...nds, newNode]);\n    setNodeText(''); // Clear input after adding\n  };\n\n  // Toggle turn simulation (in a real app, the backend would enforce this)\n  const endTurn = () => {\n    setIsMyTurn((prev) => !prev);\n  };\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      {/* Control panel */}\n      <div\n        style={{\n          position: 'absolute',\n          zIndex: 10,\n          top: 10,\n          left: 10,\n          background: '#fff',\n          padding: '10px',\n          borderRadius: '5px',\n        }}\n      >\n        <div>\n          <strong>Turn:</strong> {isMyTurn ? 'Your Turn' : \"Opponent's Turn\"}\n        </div>\n        <div style={{ marginTop: '10px' }}>\n          <input\n            type=\"text\"\n            placeholder=\"Enter node text\"\n            value={nodeText}\n            onChange={(e) => setNodeText(e.target.value)}\n            style={{ marginRight: '5px' }}\n          />\n          <select\n            value={nodeType}\n            onChange={(e) => setNodeType(e.target.value)}\n          >\n            <option value=\"Key Claim\">Key Claim</option>\n            <option value=\"Supporting Argument\">Supporting Argument</option>\n            <option value=\"Evidence\">Evidence</option>\n            <option value=\"Counterargument\">Counterargument</option>\n          </select>\n        </div>\n        <div style={{ marginTop: '10px' }}>\n          <button onClick={addNode} disabled={!isMyTurn}>\n            Add Node\n          </button>\n          <button onClick={endTurn} style={{ marginLeft: '5px' }}>\n            End Turn\n          </button>\n        </div>\n      </div>\n\n      {/* React Flow canvas */}\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        nodeTypes={nodeTypes}\n        fitView\n      >\n        <Background color=\"#aaa\" gap={16} />\n        <Controls />\n      </ReactFlow>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}